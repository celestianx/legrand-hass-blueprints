blueprint:
  name: Switch Legrand (067774)
  description: Bind Legrand switch to lights and switches supporting toggling and dimming when pressed.
  domain: automation
  source_url: https://github.com/celestianx/legrand-hass-blueprints/blob/main/legrand_switch_067774.yaml
  input:
    switch:
      name: Switch
      selector:
        device:
          manufacturer: "Legrand"
          model: "Wireless double remote switch (067774)" 
    left_button:
      name: Left Button
      selector:
        entity:
          multiple: true
          domain: 
            - light
            - switch
    right_button:
      name: Right Button
      selector:
        entity:
          multiple: true
          domain: 
            - light
            - switch
    brightness_step:
      name: Brightness Step
      description: Number of brightness units applied when dimming up or down a light (only supported for lights).
      default: 70
      selector:
        number:
          min: 0
          max: 255
          unit_of_measurement: ""
    transition_step:
      name: Transition Step
      description: Time duration for lights to transition to incremented/decremented brightness.
      default:
        hours: 0
        minutes: 0
        seconds: 1
      selector:
        duration:

mode: restart
max_exceeded: silent

variables:
  switch: !input switch
  switch_name: "{{ device_attr(switch, 'name') }}"
  left_button: !input left_button
  right_button: !input right_button
  brightness_step: !input brightness_step
  transition_step: !input transition_step

trigger:
  - platform: mqtt
    topic: zigbee2mqtt/+/action
condition:
  - condition: template
    value_template: "{{ switch_name == (trigger.topic | regex_findall_index('(?<=/).*(?=/)')) }}"
action:
  - variables:
      lights: >-
        {{ (('_left' in trigger.payload) | iif(left_button, right_button)) |
        select('search', 'light.*') | list }}
      switches: >-
        {{ (('_left' in trigger.payload) | iif(left_button, right_button)) |
        select('search', 'switch.*') | list }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ 'toggle' in trigger.payload }}"
        sequence:
          - parallel:
            - if:
                - condition: template
                  value_template: "{{ lights | length > 0 }}"
              then:
                - service: light.toggle
                  data: {}
                  target:
                    entity_id: "{{ lights }}"
            - if:
                - condition: template
                  value_template: "{{ switches | length > 0 }}"
              then:
                - service: switch.toggle
                  data: {}
                  target:
                    entity_id: "{{ switches }}"
      - conditions:
          - condition: template
            value_template: "{{ ('brightness_move' in trigger.payload) and (lights|length > 0) }}"
        sequence:
          - repeat:
              until:
                - condition: template
                  value_template: "{{ 'brightness_stop' in trigger.payload }}"
              sequence:
                - variables:
                    reference_light: "{{ lights | first }}"
                - service: light.turn_on
                  data:
                    transition: "{{ transition_step.seconds }}"
                    brightness: >
                      {% if '_move_up' in trigger.payload %}
                          {{ min(255, state_attr(reference_light, 'brightness') + brightness_step) }}
                      {% elif '_move_down' in trigger.payload %}
                        {{ max(1, state_attr(reference_light, 'brightness') - brightness_step) }}
                      {% endif %}
                  target:
                    entity_id: "{{ lights }}"
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: "{{ transition_step.seconds }}"
                    milliseconds: 0